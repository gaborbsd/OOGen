/*
 * generated by Xtext 2.10.0
 */
package hu.bme.aut.protokit.serializer;

import com.google.inject.Inject;
import hu.bme.aut.protokit.model.BinaryField;
import hu.bme.aut.protokit.model.BitField;
import hu.bme.aut.protokit.model.BitFieldComponent;
import hu.bme.aut.protokit.model.CountField;
import hu.bme.aut.protokit.model.DataType;
import hu.bme.aut.protokit.model.DataTypeField;
import hu.bme.aut.protokit.model.Formatter;
import hu.bme.aut.protokit.model.IntegerField;
import hu.bme.aut.protokit.model.LengthField;
import hu.bme.aut.protokit.model.ListField;
import hu.bme.aut.protokit.model.ModelPackage;
import hu.bme.aut.protokit.model.ProtocolModel;
import hu.bme.aut.protokit.model.StringField;
import hu.bme.aut.protokit.services.ProtokitDSLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ProtokitDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ProtokitDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ModelPackage.BINARY_FIELD:
				sequence_BinaryField(context, (BinaryField) semanticObject); 
				return; 
			case ModelPackage.BIT_FIELD:
				sequence_BitField(context, (BitField) semanticObject); 
				return; 
			case ModelPackage.BIT_FIELD_COMPONENT:
				sequence_BitfieldComponent(context, (BitFieldComponent) semanticObject); 
				return; 
			case ModelPackage.COUNT_FIELD:
				sequence_CountField(context, (CountField) semanticObject); 
				return; 
			case ModelPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case ModelPackage.DATA_TYPE_FIELD:
				sequence_DataTypeField(context, (DataTypeField) semanticObject); 
				return; 
			case ModelPackage.FORMATTER:
				sequence_Formatter(context, (Formatter) semanticObject); 
				return; 
			case ModelPackage.INTEGER_FIELD:
				sequence_IntegerField(context, (IntegerField) semanticObject); 
				return; 
			case ModelPackage.LENGTH_FIELD:
				sequence_LengthField(context, (LengthField) semanticObject); 
				return; 
			case ModelPackage.LIST_FIELD:
				sequence_ListField(context, (ListField) semanticObject); 
				return; 
			case ModelPackage.PROTOCOL_MODEL:
				sequence_ProtocolModel(context, (ProtocolModel) semanticObject); 
				return; 
			case ModelPackage.STRING_FIELD:
				sequence_StringField(context, (StringField) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     VariableDefinition returns BinaryField
	 *     BinaryField returns BinaryField
	 *
	 * Constraint:
	 *     (transientField?='transient'? identityField?='*'? name=ID (byteLen=INT | unbounded?='*')?)
	 */
	protected void sequence_BinaryField(ISerializationContext context, BinaryField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableDefinition returns BitField
	 *     BitField returns BitField
	 *
	 * Constraint:
	 *     (transientField?='transient'? identityField?='*'? name=ID components+=BitfieldComponent+)
	 */
	protected void sequence_BitField(ISerializationContext context, BitField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BitfieldComponent returns BitFieldComponent
	 *
	 * Constraint:
	 *     (name=ID bitLen=INT)
	 */
	protected void sequence_BitfieldComponent(ISerializationContext context, BitFieldComponent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.BIT_FIELD_COMPONENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.BIT_FIELD_COMPONENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.BIT_FIELD_COMPONENT__BIT_LEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.BIT_FIELD_COMPONENT__BIT_LEN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBitfieldComponentAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBitfieldComponentAccess().getBitLenINTTerminalRuleCall_2_0(), semanticObject.getBitLen());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VariableDefinition returns CountField
	 *     CountField returns CountField
	 *
	 * Constraint:
	 *     (transientField?='transient'? identityField?='*'? name=ID byteLen=INT ref=[ListField|ID])
	 */
	protected void sequence_CountField(ISerializationContext context, CountField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableDefinition returns DataTypeField
	 *     DataTypeField returns DataTypeField
	 *
	 * Constraint:
	 *     (transientField?='transient'? identityField?='*'? name=ID datatype=[DataType|ID])
	 */
	protected void sequence_DataTypeField(ISerializationContext context, DataTypeField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     (name=ID fields+=VariableDefinition+)
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Formatter returns Formatter
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Formatter(ISerializationContext context, Formatter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.FORMATTER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.FORMATTER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFormatterAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VariableDefinition returns IntegerField
	 *     IntegerField returns IntegerField
	 *
	 * Constraint:
	 *     (transientField?='transient'? identityField?='*'? name=ID byteLen=INT?)
	 */
	protected void sequence_IntegerField(ISerializationContext context, IntegerField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableDefinition returns LengthField
	 *     LengthField returns LengthField
	 *
	 * Constraint:
	 *     (transientField?='transient'? identityField?='*'? name=ID byteLen=INT ref=[BinaryField|ID])
	 */
	protected void sequence_LengthField(ISerializationContext context, LengthField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableDefinition returns ListField
	 *     ListField returns ListField
	 *
	 * Constraint:
	 *     (transientField?='transient'? identityField?='*'? name=ID elementType=[DataType|ID])
	 */
	protected void sequence_ListField(ISerializationContext context, ListField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProtocolModel returns ProtocolModel
	 *
	 * Constraint:
	 *     datatypes+=DataType+
	 */
	protected void sequence_ProtocolModel(ISerializationContext context, ProtocolModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableDefinition returns StringField
	 *     StringField returns StringField
	 *
	 * Constraint:
	 *     (transientField?='transient'? identityField?='*'? name=ID (byteLen=INT | (unbounded?='*'? formatter=Formatter))?)
	 */
	protected void sequence_StringField(ISerializationContext context, StringField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
