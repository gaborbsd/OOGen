/*
 * generated by Xtext 2.10.0
 */
package hu.bme.aut.protokit.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ProtokitDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProtocolModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.protokit.ProtokitDSL.ProtocolModel");
		private final Assignment cDatatypesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDatatypesDataTypeParserRuleCall_0 = (RuleCall)cDatatypesAssignment.eContents().get(0);
		
		//ProtocolModel:
		//	datatypes+=DataType+;
		@Override public ParserRule getRule() { return rule; }
		
		//datatypes+=DataType+
		public Assignment getDatatypesAssignment() { return cDatatypesAssignment; }
		
		//DataType
		public RuleCall getDatatypesDataTypeParserRuleCall_0() { return cDatatypesDataTypeParserRuleCall_0; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.protokit.ProtokitDSL.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cProtocolKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDatatypeKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsVariableDefinitionParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DataType:
		//	('protocol' | 'datatype') name=ID '{' fields+=VariableDefinition+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//('protocol' | 'datatype') name=ID '{' fields+=VariableDefinition+ '}'
		public Group getGroup() { return cGroup; }
		
		//('protocol' | 'datatype')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'protocol'
		public Keyword getProtocolKeyword_0_0() { return cProtocolKeyword_0_0; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_0_1() { return cDatatypeKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//fields+=VariableDefinition+
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }
		
		//VariableDefinition
		public RuleCall getFieldsVariableDefinitionParserRuleCall_3_0() { return cFieldsVariableDefinitionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.protokit.ProtokitDSL.VariableDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBinaryFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBitFieldParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cListFieldParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLengthFieldParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCountFieldParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDataTypeFieldParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//VariableDefinition Field:
		//	IntegerField | StringField | BinaryField | BitField | ListField | LengthField | CountField | DataTypeField
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerField | StringField | BinaryField | BitField | ListField | LengthField | CountField | DataTypeField
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerField
		public RuleCall getIntegerFieldParserRuleCall_0() { return cIntegerFieldParserRuleCall_0; }
		
		//StringField
		public RuleCall getStringFieldParserRuleCall_1() { return cStringFieldParserRuleCall_1; }
		
		//BinaryField
		public RuleCall getBinaryFieldParserRuleCall_2() { return cBinaryFieldParserRuleCall_2; }
		
		//BitField
		public RuleCall getBitFieldParserRuleCall_3() { return cBitFieldParserRuleCall_3; }
		
		//ListField
		public RuleCall getListFieldParserRuleCall_4() { return cListFieldParserRuleCall_4; }
		
		//LengthField
		public RuleCall getLengthFieldParserRuleCall_5() { return cLengthFieldParserRuleCall_5; }
		
		//CountField
		public RuleCall getCountFieldParserRuleCall_6() { return cCountFieldParserRuleCall_6; }
		
		//DataTypeField
		public RuleCall getDataTypeFieldParserRuleCall_7() { return cDataTypeFieldParserRuleCall_7; }
	}
	public class IntegerFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.protokit.ProtokitDSL.IntegerField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTransientFieldAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTransientFieldTransientKeyword_0_0 = (Keyword)cTransientFieldAssignment_0.eContents().get(0);
		private final Assignment cIdentityFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIdentityFieldAsteriskKeyword_1_0 = (Keyword)cIdentityFieldAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cByteLenAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cByteLenINTTerminalRuleCall_5_1_0 = (RuleCall)cByteLenAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//IntegerField:
		//	transientField?='transient'? identityField?='*'? name=ID ':' 'int' ('(' byteLen=INT ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//transientField?='transient'? identityField?='*'? name=ID ':' 'int' ('(' byteLen=INT ')')?
		public Group getGroup() { return cGroup; }
		
		//transientField?='transient'?
		public Assignment getTransientFieldAssignment_0() { return cTransientFieldAssignment_0; }
		
		//'transient'
		public Keyword getTransientFieldTransientKeyword_0_0() { return cTransientFieldTransientKeyword_0_0; }
		
		//identityField?='*'?
		public Assignment getIdentityFieldAssignment_1() { return cIdentityFieldAssignment_1; }
		
		//'*'
		public Keyword getIdentityFieldAsteriskKeyword_1_0() { return cIdentityFieldAsteriskKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'int'
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }
		
		//('(' byteLen=INT ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//byteLen=INT
		public Assignment getByteLenAssignment_5_1() { return cByteLenAssignment_5_1; }
		
		//INT
		public RuleCall getByteLenINTTerminalRuleCall_5_1_0() { return cByteLenINTTerminalRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}
	public class StringFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.protokit.ProtokitDSL.StringField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTransientFieldAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTransientFieldTransientKeyword_0_0 = (Keyword)cTransientFieldAssignment_0.eContents().get(0);
		private final Assignment cIdentityFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIdentityFieldAsteriskKeyword_1_0 = (Keyword)cIdentityFieldAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cStringKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cByteLenAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cByteLenINTTerminalRuleCall_5_0_1_0 = (RuleCall)cByteLenAssignment_5_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cUnboundedAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final Keyword cUnboundedAsteriskKeyword_5_1_1_0 = (Keyword)cUnboundedAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_1_2 = (Keyword)cGroup_5_1.eContents().get(2);
		private final Assignment cFormatterAssignment_5_1_3 = (Assignment)cGroup_5_1.eContents().get(3);
		private final RuleCall cFormatterFormatterParserRuleCall_5_1_3_0 = (RuleCall)cFormatterAssignment_5_1_3.eContents().get(0);
		
		//StringField:
		//	transientField?='transient'? identityField?='*'? name=ID ':' 'string' ('(' byteLen=INT ')' | '(' unbounded?='*'? ')'
		//	formatter=Formatter)?;
		@Override public ParserRule getRule() { return rule; }
		
		//transientField?='transient'? identityField?='*'? name=ID ':' 'string' ('(' byteLen=INT ')' | '(' unbounded?='*'? ')'
		//formatter=Formatter)?
		public Group getGroup() { return cGroup; }
		
		//transientField?='transient'?
		public Assignment getTransientFieldAssignment_0() { return cTransientFieldAssignment_0; }
		
		//'transient'
		public Keyword getTransientFieldTransientKeyword_0_0() { return cTransientFieldTransientKeyword_0_0; }
		
		//identityField?='*'?
		public Assignment getIdentityFieldAssignment_1() { return cIdentityFieldAssignment_1; }
		
		//'*'
		public Keyword getIdentityFieldAsteriskKeyword_1_0() { return cIdentityFieldAsteriskKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'string'
		public Keyword getStringKeyword_4() { return cStringKeyword_4; }
		
		//('(' byteLen=INT ')' | '(' unbounded?='*'? ')' formatter=Formatter)?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'(' byteLen=INT ')'
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0_0() { return cLeftParenthesisKeyword_5_0_0; }
		
		//byteLen=INT
		public Assignment getByteLenAssignment_5_0_1() { return cByteLenAssignment_5_0_1; }
		
		//INT
		public RuleCall getByteLenINTTerminalRuleCall_5_0_1_0() { return cByteLenINTTerminalRuleCall_5_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_0_2() { return cRightParenthesisKeyword_5_0_2; }
		
		//'(' unbounded?='*'? ')' formatter=Formatter
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1_0() { return cLeftParenthesisKeyword_5_1_0; }
		
		//unbounded?='*'?
		public Assignment getUnboundedAssignment_5_1_1() { return cUnboundedAssignment_5_1_1; }
		
		//'*'
		public Keyword getUnboundedAsteriskKeyword_5_1_1_0() { return cUnboundedAsteriskKeyword_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_1_2() { return cRightParenthesisKeyword_5_1_2; }
		
		//formatter=Formatter
		public Assignment getFormatterAssignment_5_1_3() { return cFormatterAssignment_5_1_3; }
		
		//Formatter
		public RuleCall getFormatterFormatterParserRuleCall_5_1_3_0() { return cFormatterFormatterParserRuleCall_5_1_3_0; }
	}
	public class BinaryFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.protokit.ProtokitDSL.BinaryField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTransientFieldAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTransientFieldTransientKeyword_0_0 = (Keyword)cTransientFieldAssignment_0.eContents().get(0);
		private final Assignment cIdentityFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIdentityFieldAsteriskKeyword_1_0 = (Keyword)cIdentityFieldAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cBinaryKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cByteLenAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cByteLenINTTerminalRuleCall_5_0_1_0 = (RuleCall)cByteLenAssignment_5_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cUnboundedAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final Keyword cUnboundedAsteriskKeyword_5_1_1_0 = (Keyword)cUnboundedAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_1_2 = (Keyword)cGroup_5_1.eContents().get(2);
		
		//BinaryField:
		//	transientField?='transient'? identityField?='*'? name=ID ':' 'binary' ('(' byteLen=INT ')' | '(' unbounded?='*'?
		//	')');
		@Override public ParserRule getRule() { return rule; }
		
		//transientField?='transient'? identityField?='*'? name=ID ':' 'binary' ('(' byteLen=INT ')' | '(' unbounded?='*'? ')')
		public Group getGroup() { return cGroup; }
		
		//transientField?='transient'?
		public Assignment getTransientFieldAssignment_0() { return cTransientFieldAssignment_0; }
		
		//'transient'
		public Keyword getTransientFieldTransientKeyword_0_0() { return cTransientFieldTransientKeyword_0_0; }
		
		//identityField?='*'?
		public Assignment getIdentityFieldAssignment_1() { return cIdentityFieldAssignment_1; }
		
		//'*'
		public Keyword getIdentityFieldAsteriskKeyword_1_0() { return cIdentityFieldAsteriskKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'binary'
		public Keyword getBinaryKeyword_4() { return cBinaryKeyword_4; }
		
		//('(' byteLen=INT ')' | '(' unbounded?='*'? ')')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'(' byteLen=INT ')'
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0_0() { return cLeftParenthesisKeyword_5_0_0; }
		
		//byteLen=INT
		public Assignment getByteLenAssignment_5_0_1() { return cByteLenAssignment_5_0_1; }
		
		//INT
		public RuleCall getByteLenINTTerminalRuleCall_5_0_1_0() { return cByteLenINTTerminalRuleCall_5_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_0_2() { return cRightParenthesisKeyword_5_0_2; }
		
		//'(' unbounded?='*'? ')'
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1_0() { return cLeftParenthesisKeyword_5_1_0; }
		
		//unbounded?='*'?
		public Assignment getUnboundedAssignment_5_1_1() { return cUnboundedAssignment_5_1_1; }
		
		//'*'
		public Keyword getUnboundedAsteriskKeyword_5_1_1_0() { return cUnboundedAsteriskKeyword_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_1_2() { return cRightParenthesisKeyword_5_1_2; }
	}
	public class BitFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.protokit.ProtokitDSL.BitField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTransientFieldAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTransientFieldTransientKeyword_0_0 = (Keyword)cTransientFieldAssignment_0.eContents().get(0);
		private final Assignment cIdentityFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIdentityFieldAsteriskKeyword_1_0 = (Keyword)cIdentityFieldAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cBitfieldKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cComponentsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cComponentsBitfieldComponentParserRuleCall_6_0 = (RuleCall)cComponentsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BitField:
		//	transientField?='transient'? identityField?='*'? name=ID ':' 'bitfield' '{' components+=BitfieldComponent+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//transientField?='transient'? identityField?='*'? name=ID ':' 'bitfield' '{' components+=BitfieldComponent+ '}'
		public Group getGroup() { return cGroup; }
		
		//transientField?='transient'?
		public Assignment getTransientFieldAssignment_0() { return cTransientFieldAssignment_0; }
		
		//'transient'
		public Keyword getTransientFieldTransientKeyword_0_0() { return cTransientFieldTransientKeyword_0_0; }
		
		//identityField?='*'?
		public Assignment getIdentityFieldAssignment_1() { return cIdentityFieldAssignment_1; }
		
		//'*'
		public Keyword getIdentityFieldAsteriskKeyword_1_0() { return cIdentityFieldAsteriskKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'bitfield'
		public Keyword getBitfieldKeyword_4() { return cBitfieldKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//components+=BitfieldComponent+
		public Assignment getComponentsAssignment_6() { return cComponentsAssignment_6; }
		
		//BitfieldComponent
		public RuleCall getComponentsBitfieldComponentParserRuleCall_6_0() { return cComponentsBitfieldComponentParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class BitfieldComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.protokit.ProtokitDSL.BitfieldComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBitLenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBitLenINTTerminalRuleCall_2_0 = (RuleCall)cBitLenAssignment_2.eContents().get(0);
		
		//BitfieldComponent BitFieldComponent:
		//	name=ID ':' bitLen=INT
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' bitLen=INT
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//bitLen=INT
		public Assignment getBitLenAssignment_2() { return cBitLenAssignment_2; }
		
		//INT
		public RuleCall getBitLenINTTerminalRuleCall_2_0() { return cBitLenINTTerminalRuleCall_2_0; }
	}
	public class ListFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.protokit.ProtokitDSL.ListField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTransientFieldAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTransientFieldTransientKeyword_0_0 = (Keyword)cTransientFieldAssignment_0.eContents().get(0);
		private final Assignment cIdentityFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIdentityFieldAsteriskKeyword_1_0 = (Keyword)cIdentityFieldAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cListKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cElementTypeDataTypeCrossReference_6_0 = (CrossReference)cElementTypeAssignment_6.eContents().get(0);
		private final RuleCall cElementTypeDataTypeIDTerminalRuleCall_6_0_1 = (RuleCall)cElementTypeDataTypeCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ListField:
		//	transientField?='transient'? identityField?='*'? name=ID ':' 'list' '(' elementType=[DataType] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//transientField?='transient'? identityField?='*'? name=ID ':' 'list' '(' elementType=[DataType] ')'
		public Group getGroup() { return cGroup; }
		
		//transientField?='transient'?
		public Assignment getTransientFieldAssignment_0() { return cTransientFieldAssignment_0; }
		
		//'transient'
		public Keyword getTransientFieldTransientKeyword_0_0() { return cTransientFieldTransientKeyword_0_0; }
		
		//identityField?='*'?
		public Assignment getIdentityFieldAssignment_1() { return cIdentityFieldAssignment_1; }
		
		//'*'
		public Keyword getIdentityFieldAsteriskKeyword_1_0() { return cIdentityFieldAsteriskKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'list'
		public Keyword getListKeyword_4() { return cListKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//elementType=[DataType]
		public Assignment getElementTypeAssignment_6() { return cElementTypeAssignment_6; }
		
		//[DataType]
		public CrossReference getElementTypeDataTypeCrossReference_6_0() { return cElementTypeDataTypeCrossReference_6_0; }
		
		//ID
		public RuleCall getElementTypeDataTypeIDTerminalRuleCall_6_0_1() { return cElementTypeDataTypeIDTerminalRuleCall_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class LengthFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.protokit.ProtokitDSL.LengthField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTransientFieldAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTransientFieldTransientKeyword_0_0 = (Keyword)cTransientFieldAssignment_0.eContents().get(0);
		private final Assignment cIdentityFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIdentityFieldAsteriskKeyword_1_0 = (Keyword)cIdentityFieldAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLengthKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cByteLenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cByteLenINTTerminalRuleCall_6_0 = (RuleCall)cByteLenAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cRefAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cRefBinaryFieldCrossReference_8_0 = (CrossReference)cRefAssignment_8.eContents().get(0);
		private final RuleCall cRefBinaryFieldIDTerminalRuleCall_8_0_1 = (RuleCall)cRefBinaryFieldCrossReference_8_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//LengthField:
		//	transientField?='transient'? identityField?='*'? name=ID ':' 'length' '(' byteLen=INT ',' ref=[BinaryField] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//transientField?='transient'? identityField?='*'? name=ID ':' 'length' '(' byteLen=INT ',' ref=[BinaryField] ')'
		public Group getGroup() { return cGroup; }
		
		//transientField?='transient'?
		public Assignment getTransientFieldAssignment_0() { return cTransientFieldAssignment_0; }
		
		//'transient'
		public Keyword getTransientFieldTransientKeyword_0_0() { return cTransientFieldTransientKeyword_0_0; }
		
		//identityField?='*'?
		public Assignment getIdentityFieldAssignment_1() { return cIdentityFieldAssignment_1; }
		
		//'*'
		public Keyword getIdentityFieldAsteriskKeyword_1_0() { return cIdentityFieldAsteriskKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'length'
		public Keyword getLengthKeyword_4() { return cLengthKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//byteLen=INT
		public Assignment getByteLenAssignment_6() { return cByteLenAssignment_6; }
		
		//INT
		public RuleCall getByteLenINTTerminalRuleCall_6_0() { return cByteLenINTTerminalRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//ref=[BinaryField]
		public Assignment getRefAssignment_8() { return cRefAssignment_8; }
		
		//[BinaryField]
		public CrossReference getRefBinaryFieldCrossReference_8_0() { return cRefBinaryFieldCrossReference_8_0; }
		
		//ID
		public RuleCall getRefBinaryFieldIDTerminalRuleCall_8_0_1() { return cRefBinaryFieldIDTerminalRuleCall_8_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class CountFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.protokit.ProtokitDSL.CountField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTransientFieldAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTransientFieldTransientKeyword_0_0 = (Keyword)cTransientFieldAssignment_0.eContents().get(0);
		private final Assignment cIdentityFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIdentityFieldAsteriskKeyword_1_0 = (Keyword)cIdentityFieldAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCountKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cByteLenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cByteLenINTTerminalRuleCall_6_0 = (RuleCall)cByteLenAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cRefAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cRefListFieldCrossReference_8_0 = (CrossReference)cRefAssignment_8.eContents().get(0);
		private final RuleCall cRefListFieldIDTerminalRuleCall_8_0_1 = (RuleCall)cRefListFieldCrossReference_8_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//CountField:
		//	transientField?='transient'? identityField?='*'? name=ID ':' 'count' '(' byteLen=INT ',' ref=[ListField] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//transientField?='transient'? identityField?='*'? name=ID ':' 'count' '(' byteLen=INT ',' ref=[ListField] ')'
		public Group getGroup() { return cGroup; }
		
		//transientField?='transient'?
		public Assignment getTransientFieldAssignment_0() { return cTransientFieldAssignment_0; }
		
		//'transient'
		public Keyword getTransientFieldTransientKeyword_0_0() { return cTransientFieldTransientKeyword_0_0; }
		
		//identityField?='*'?
		public Assignment getIdentityFieldAssignment_1() { return cIdentityFieldAssignment_1; }
		
		//'*'
		public Keyword getIdentityFieldAsteriskKeyword_1_0() { return cIdentityFieldAsteriskKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'count'
		public Keyword getCountKeyword_4() { return cCountKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//byteLen=INT
		public Assignment getByteLenAssignment_6() { return cByteLenAssignment_6; }
		
		//INT
		public RuleCall getByteLenINTTerminalRuleCall_6_0() { return cByteLenINTTerminalRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//ref=[ListField]
		public Assignment getRefAssignment_8() { return cRefAssignment_8; }
		
		//[ListField]
		public CrossReference getRefListFieldCrossReference_8_0() { return cRefListFieldCrossReference_8_0; }
		
		//ID
		public RuleCall getRefListFieldIDTerminalRuleCall_8_0_1() { return cRefListFieldIDTerminalRuleCall_8_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class DataTypeFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.protokit.ProtokitDSL.DataTypeField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTransientFieldAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTransientFieldTransientKeyword_0_0 = (Keyword)cTransientFieldAssignment_0.eContents().get(0);
		private final Assignment cIdentityFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIdentityFieldAsteriskKeyword_1_0 = (Keyword)cIdentityFieldAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDatatypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDatatypeDataTypeCrossReference_4_0 = (CrossReference)cDatatypeAssignment_4.eContents().get(0);
		private final RuleCall cDatatypeDataTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cDatatypeDataTypeCrossReference_4_0.eContents().get(1);
		
		//DataTypeField:
		//	transientField?='transient'? identityField?='*'? name=ID ':' datatype=[DataType];
		@Override public ParserRule getRule() { return rule; }
		
		//transientField?='transient'? identityField?='*'? name=ID ':' datatype=[DataType]
		public Group getGroup() { return cGroup; }
		
		//transientField?='transient'?
		public Assignment getTransientFieldAssignment_0() { return cTransientFieldAssignment_0; }
		
		//'transient'
		public Keyword getTransientFieldTransientKeyword_0_0() { return cTransientFieldTransientKeyword_0_0; }
		
		//identityField?='*'?
		public Assignment getIdentityFieldAssignment_1() { return cIdentityFieldAssignment_1; }
		
		//'*'
		public Keyword getIdentityFieldAsteriskKeyword_1_0() { return cIdentityFieldAsteriskKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//datatype=[DataType]
		public Assignment getDatatypeAssignment_4() { return cDatatypeAssignment_4; }
		
		//[DataType]
		public CrossReference getDatatypeDataTypeCrossReference_4_0() { return cDatatypeDataTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getDatatypeDataTypeIDTerminalRuleCall_4_0_1() { return cDatatypeDataTypeIDTerminalRuleCall_4_0_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.protokit.ProtokitDSL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class FormatterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.protokit.ProtokitDSL.Formatter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormatterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Formatter:
		//	'formatter' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'formatter' name=ID
		public Group getGroup() { return cGroup; }
		
		//'formatter'
		public Keyword getFormatterKeyword_0() { return cFormatterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final ProtocolModelElements pProtocolModel;
	private final DataTypeElements pDataType;
	private final VariableDefinitionElements pVariableDefinition;
	private final IntegerFieldElements pIntegerField;
	private final StringFieldElements pStringField;
	private final BinaryFieldElements pBinaryField;
	private final BitFieldElements pBitField;
	private final BitfieldComponentElements pBitfieldComponent;
	private final ListFieldElements pListField;
	private final LengthFieldElements pLengthField;
	private final CountFieldElements pCountField;
	private final DataTypeFieldElements pDataTypeField;
	private final EStringElements pEString;
	private final FormatterElements pFormatter;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ProtokitDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProtocolModel = new ProtocolModelElements();
		this.pDataType = new DataTypeElements();
		this.pVariableDefinition = new VariableDefinitionElements();
		this.pIntegerField = new IntegerFieldElements();
		this.pStringField = new StringFieldElements();
		this.pBinaryField = new BinaryFieldElements();
		this.pBitField = new BitFieldElements();
		this.pBitfieldComponent = new BitfieldComponentElements();
		this.pListField = new ListFieldElements();
		this.pLengthField = new LengthFieldElements();
		this.pCountField = new CountFieldElements();
		this.pDataTypeField = new DataTypeFieldElements();
		this.pEString = new EStringElements();
		this.pFormatter = new FormatterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.aut.protokit.ProtokitDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ProtocolModel:
	//	datatypes+=DataType+;
	public ProtocolModelElements getProtocolModelAccess() {
		return pProtocolModel;
	}
	
	public ParserRule getProtocolModelRule() {
		return getProtocolModelAccess().getRule();
	}
	
	//DataType:
	//	('protocol' | 'datatype') name=ID '{' fields+=VariableDefinition+ '}';
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//VariableDefinition Field:
	//	IntegerField | StringField | BinaryField | BitField | ListField | LengthField | CountField | DataTypeField
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return pVariableDefinition;
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}
	
	//IntegerField:
	//	transientField?='transient'? identityField?='*'? name=ID ':' 'int' ('(' byteLen=INT ')')?;
	public IntegerFieldElements getIntegerFieldAccess() {
		return pIntegerField;
	}
	
	public ParserRule getIntegerFieldRule() {
		return getIntegerFieldAccess().getRule();
	}
	
	//StringField:
	//	transientField?='transient'? identityField?='*'? name=ID ':' 'string' ('(' byteLen=INT ')' | '(' unbounded?='*'? ')'
	//	formatter=Formatter)?;
	public StringFieldElements getStringFieldAccess() {
		return pStringField;
	}
	
	public ParserRule getStringFieldRule() {
		return getStringFieldAccess().getRule();
	}
	
	//BinaryField:
	//	transientField?='transient'? identityField?='*'? name=ID ':' 'binary' ('(' byteLen=INT ')' | '(' unbounded?='*'?
	//	')');
	public BinaryFieldElements getBinaryFieldAccess() {
		return pBinaryField;
	}
	
	public ParserRule getBinaryFieldRule() {
		return getBinaryFieldAccess().getRule();
	}
	
	//BitField:
	//	transientField?='transient'? identityField?='*'? name=ID ':' 'bitfield' '{' components+=BitfieldComponent+ '}';
	public BitFieldElements getBitFieldAccess() {
		return pBitField;
	}
	
	public ParserRule getBitFieldRule() {
		return getBitFieldAccess().getRule();
	}
	
	//BitfieldComponent BitFieldComponent:
	//	name=ID ':' bitLen=INT
	public BitfieldComponentElements getBitfieldComponentAccess() {
		return pBitfieldComponent;
	}
	
	public ParserRule getBitfieldComponentRule() {
		return getBitfieldComponentAccess().getRule();
	}
	
	//ListField:
	//	transientField?='transient'? identityField?='*'? name=ID ':' 'list' '(' elementType=[DataType] ')';
	public ListFieldElements getListFieldAccess() {
		return pListField;
	}
	
	public ParserRule getListFieldRule() {
		return getListFieldAccess().getRule();
	}
	
	//LengthField:
	//	transientField?='transient'? identityField?='*'? name=ID ':' 'length' '(' byteLen=INT ',' ref=[BinaryField] ')';
	public LengthFieldElements getLengthFieldAccess() {
		return pLengthField;
	}
	
	public ParserRule getLengthFieldRule() {
		return getLengthFieldAccess().getRule();
	}
	
	//CountField:
	//	transientField?='transient'? identityField?='*'? name=ID ':' 'count' '(' byteLen=INT ',' ref=[ListField] ')';
	public CountFieldElements getCountFieldAccess() {
		return pCountField;
	}
	
	public ParserRule getCountFieldRule() {
		return getCountFieldAccess().getRule();
	}
	
	//DataTypeField:
	//	transientField?='transient'? identityField?='*'? name=ID ':' datatype=[DataType];
	public DataTypeFieldElements getDataTypeFieldAccess() {
		return pDataTypeField;
	}
	
	public ParserRule getDataTypeFieldRule() {
		return getDataTypeFieldAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Formatter:
	//	'formatter' name=ID;
	public FormatterElements getFormatterAccess() {
		return pFormatter;
	}
	
	public ParserRule getFormatterRule() {
		return getFormatterAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
