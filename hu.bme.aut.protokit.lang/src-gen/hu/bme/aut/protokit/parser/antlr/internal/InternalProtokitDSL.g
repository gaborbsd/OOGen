/*
 * generated by Xtext 2.10.0
 */
grammar InternalProtokitDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package hu.bme.aut.protokit.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.bme.aut.protokit.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hu.bme.aut.protokit.services.ProtokitDSLGrammarAccess;

}

@parser::members {

 	private ProtokitDSLGrammarAccess grammarAccess;

    public InternalProtokitDSLParser(TokenStream input, ProtokitDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ProtocolModel";
   	}

   	@Override
   	protected ProtokitDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProtocolModel
entryRuleProtocolModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProtocolModelRule()); }
	iv_ruleProtocolModel=ruleProtocolModel
	{ $current=$iv_ruleProtocolModel.current; }
	EOF;

// Rule ProtocolModel
ruleProtocolModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProtocolModelAccess().getDatatypesDataTypeParserRuleCall_0());
			}
			lv_datatypes_0_0=ruleDataType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProtocolModelRule());
				}
				add(
					$current,
					"datatypes",
					lv_datatypes_0_0,
					"hu.bme.aut.protokit.ProtokitDSL.DataType");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	iv_ruleDataType=ruleDataType
	{ $current=$iv_ruleDataType.current; }
	EOF;

// Rule DataType
ruleDataType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='protocol'
			{
				newLeafNode(otherlv_0, grammarAccess.getDataTypeAccess().getProtocolKeyword_0_0());
			}
			    |
			otherlv_1='datatype'
			{
				newLeafNode(otherlv_1, grammarAccess.getDataTypeAccess().getDatatypeKeyword_0_1());
			}
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getDataTypeAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDataTypeAccess().getFieldsVariableDefinitionParserRuleCall_3_0());
				}
				lv_fields_4_0=ruleVariableDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDataTypeRule());
					}
					add(
						$current,
						"fields",
						lv_fields_4_0,
						"hu.bme.aut.protokit.ProtokitDSL.VariableDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getDataTypeAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleVariableDefinition
entryRuleVariableDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDefinitionRule()); }
	iv_ruleVariableDefinition=ruleVariableDefinition
	{ $current=$iv_ruleVariableDefinition.current; }
	EOF;

// Rule VariableDefinition
ruleVariableDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableDefinitionAccess().getIntegerFieldParserRuleCall_0());
		}
		this_IntegerField_0=ruleIntegerField
		{
			$current = $this_IntegerField_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableDefinitionAccess().getStringFieldParserRuleCall_1());
		}
		this_StringField_1=ruleStringField
		{
			$current = $this_StringField_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableDefinitionAccess().getBinaryFieldParserRuleCall_2());
		}
		this_BinaryField_2=ruleBinaryField
		{
			$current = $this_BinaryField_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableDefinitionAccess().getBitFieldParserRuleCall_3());
		}
		this_BitField_3=ruleBitField
		{
			$current = $this_BitField_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableDefinitionAccess().getListFieldParserRuleCall_4());
		}
		this_ListField_4=ruleListField
		{
			$current = $this_ListField_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableDefinitionAccess().getLengthFieldParserRuleCall_5());
		}
		this_LengthField_5=ruleLengthField
		{
			$current = $this_LengthField_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableDefinitionAccess().getCountFieldParserRuleCall_6());
		}
		this_CountField_6=ruleCountField
		{
			$current = $this_CountField_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableDefinitionAccess().getDataTypeFieldParserRuleCall_7());
		}
		this_DataTypeField_7=ruleDataTypeField
		{
			$current = $this_DataTypeField_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntegerField
entryRuleIntegerField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerFieldRule()); }
	iv_ruleIntegerField=ruleIntegerField
	{ $current=$iv_ruleIntegerField.current; }
	EOF;

// Rule IntegerField
ruleIntegerField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_transientField_0_0='transient'
				{
					newLeafNode(lv_transientField_0_0, grammarAccess.getIntegerFieldAccess().getTransientFieldTransientKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerFieldRule());
					}
					setWithLastConsumed($current, "transientField", true, "transient");
				}
			)
		)?
		(
			(
				lv_identityField_1_0='*'
				{
					newLeafNode(lv_identityField_1_0, grammarAccess.getIntegerFieldAccess().getIdentityFieldAsteriskKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerFieldRule());
					}
					setWithLastConsumed($current, "identityField", true, "*");
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getIntegerFieldAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getIntegerFieldAccess().getColonKeyword_3());
		}
		otherlv_4='int'
		{
			newLeafNode(otherlv_4, grammarAccess.getIntegerFieldAccess().getIntKeyword_4());
		}
		(
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getIntegerFieldAccess().getLeftParenthesisKeyword_5_0());
			}
			(
				(
					lv_byteLen_6_0=RULE_INT
					{
						newLeafNode(lv_byteLen_6_0, grammarAccess.getIntegerFieldAccess().getByteLenINTTerminalRuleCall_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIntegerFieldRule());
						}
						setWithLastConsumed(
							$current,
							"byteLen",
							lv_byteLen_6_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getIntegerFieldAccess().getRightParenthesisKeyword_5_2());
			}
		)?
	)
;

// Entry rule entryRuleStringField
entryRuleStringField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringFieldRule()); }
	iv_ruleStringField=ruleStringField
	{ $current=$iv_ruleStringField.current; }
	EOF;

// Rule StringField
ruleStringField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_transientField_0_0='transient'
				{
					newLeafNode(lv_transientField_0_0, grammarAccess.getStringFieldAccess().getTransientFieldTransientKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringFieldRule());
					}
					setWithLastConsumed($current, "transientField", true, "transient");
				}
			)
		)?
		(
			(
				lv_identityField_1_0='*'
				{
					newLeafNode(lv_identityField_1_0, grammarAccess.getStringFieldAccess().getIdentityFieldAsteriskKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringFieldRule());
					}
					setWithLastConsumed($current, "identityField", true, "*");
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getStringFieldAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getStringFieldAccess().getColonKeyword_3());
		}
		otherlv_4='string'
		{
			newLeafNode(otherlv_4, grammarAccess.getStringFieldAccess().getStringKeyword_4());
		}
		(
			(
				otherlv_5='('
				{
					newLeafNode(otherlv_5, grammarAccess.getStringFieldAccess().getLeftParenthesisKeyword_5_0_0());
				}
				(
					(
						lv_byteLen_6_0=RULE_INT
						{
							newLeafNode(lv_byteLen_6_0, grammarAccess.getStringFieldAccess().getByteLenINTTerminalRuleCall_5_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getStringFieldRule());
							}
							setWithLastConsumed(
								$current,
								"byteLen",
								lv_byteLen_6_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
				otherlv_7=')'
				{
					newLeafNode(otherlv_7, grammarAccess.getStringFieldAccess().getRightParenthesisKeyword_5_0_2());
				}
			)
			    |
			(
				otherlv_8='('
				{
					newLeafNode(otherlv_8, grammarAccess.getStringFieldAccess().getLeftParenthesisKeyword_5_1_0());
				}
				(
					(
						lv_unbounded_9_0='*'
						{
							newLeafNode(lv_unbounded_9_0, grammarAccess.getStringFieldAccess().getUnboundedAsteriskKeyword_5_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getStringFieldRule());
							}
							setWithLastConsumed($current, "unbounded", true, "*");
						}
					)
				)?
				otherlv_10=')'
				{
					newLeafNode(otherlv_10, grammarAccess.getStringFieldAccess().getRightParenthesisKeyword_5_1_2());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStringFieldAccess().getFormatterFormatterParserRuleCall_5_1_3_0());
						}
						lv_formatter_11_0=ruleFormatter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStringFieldRule());
							}
							set(
								$current,
								"formatter",
								lv_formatter_11_0,
								"hu.bme.aut.protokit.ProtokitDSL.Formatter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleBinaryField
entryRuleBinaryField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryFieldRule()); }
	iv_ruleBinaryField=ruleBinaryField
	{ $current=$iv_ruleBinaryField.current; }
	EOF;

// Rule BinaryField
ruleBinaryField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_transientField_0_0='transient'
				{
					newLeafNode(lv_transientField_0_0, grammarAccess.getBinaryFieldAccess().getTransientFieldTransientKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBinaryFieldRule());
					}
					setWithLastConsumed($current, "transientField", true, "transient");
				}
			)
		)?
		(
			(
				lv_identityField_1_0='*'
				{
					newLeafNode(lv_identityField_1_0, grammarAccess.getBinaryFieldAccess().getIdentityFieldAsteriskKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBinaryFieldRule());
					}
					setWithLastConsumed($current, "identityField", true, "*");
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getBinaryFieldAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBinaryFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getBinaryFieldAccess().getColonKeyword_3());
		}
		otherlv_4='binary'
		{
			newLeafNode(otherlv_4, grammarAccess.getBinaryFieldAccess().getBinaryKeyword_4());
		}
		(
			(
				otherlv_5='('
				{
					newLeafNode(otherlv_5, grammarAccess.getBinaryFieldAccess().getLeftParenthesisKeyword_5_0_0());
				}
				(
					(
						lv_byteLen_6_0=RULE_INT
						{
							newLeafNode(lv_byteLen_6_0, grammarAccess.getBinaryFieldAccess().getByteLenINTTerminalRuleCall_5_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBinaryFieldRule());
							}
							setWithLastConsumed(
								$current,
								"byteLen",
								lv_byteLen_6_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
				otherlv_7=')'
				{
					newLeafNode(otherlv_7, grammarAccess.getBinaryFieldAccess().getRightParenthesisKeyword_5_0_2());
				}
			)
			    |
			(
				otherlv_8='('
				{
					newLeafNode(otherlv_8, grammarAccess.getBinaryFieldAccess().getLeftParenthesisKeyword_5_1_0());
				}
				(
					(
						lv_unbounded_9_0='*'
						{
							newLeafNode(lv_unbounded_9_0, grammarAccess.getBinaryFieldAccess().getUnboundedAsteriskKeyword_5_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBinaryFieldRule());
							}
							setWithLastConsumed($current, "unbounded", true, "*");
						}
					)
				)?
				otherlv_10=')'
				{
					newLeafNode(otherlv_10, grammarAccess.getBinaryFieldAccess().getRightParenthesisKeyword_5_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleBitField
entryRuleBitField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitFieldRule()); }
	iv_ruleBitField=ruleBitField
	{ $current=$iv_ruleBitField.current; }
	EOF;

// Rule BitField
ruleBitField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_transientField_0_0='transient'
				{
					newLeafNode(lv_transientField_0_0, grammarAccess.getBitFieldAccess().getTransientFieldTransientKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBitFieldRule());
					}
					setWithLastConsumed($current, "transientField", true, "transient");
				}
			)
		)?
		(
			(
				lv_identityField_1_0='*'
				{
					newLeafNode(lv_identityField_1_0, grammarAccess.getBitFieldAccess().getIdentityFieldAsteriskKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBitFieldRule());
					}
					setWithLastConsumed($current, "identityField", true, "*");
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getBitFieldAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBitFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getBitFieldAccess().getColonKeyword_3());
		}
		otherlv_4='bitfield'
		{
			newLeafNode(otherlv_4, grammarAccess.getBitFieldAccess().getBitfieldKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getBitFieldAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBitFieldAccess().getComponentsBitfieldComponentParserRuleCall_6_0());
				}
				lv_components_6_0=ruleBitfieldComponent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBitFieldRule());
					}
					add(
						$current,
						"components",
						lv_components_6_0,
						"hu.bme.aut.protokit.ProtokitDSL.BitfieldComponent");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getBitFieldAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleBitfieldComponent
entryRuleBitfieldComponent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitfieldComponentRule()); }
	iv_ruleBitfieldComponent=ruleBitfieldComponent
	{ $current=$iv_ruleBitfieldComponent.current; }
	EOF;

// Rule BitfieldComponent
ruleBitfieldComponent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getBitfieldComponentAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBitfieldComponentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getBitfieldComponentAccess().getColonKeyword_1());
		}
		(
			(
				lv_bitLen_2_0=RULE_INT
				{
					newLeafNode(lv_bitLen_2_0, grammarAccess.getBitfieldComponentAccess().getBitLenINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBitfieldComponentRule());
					}
					setWithLastConsumed(
						$current,
						"bitLen",
						lv_bitLen_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleListField
entryRuleListField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListFieldRule()); }
	iv_ruleListField=ruleListField
	{ $current=$iv_ruleListField.current; }
	EOF;

// Rule ListField
ruleListField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_transientField_0_0='transient'
				{
					newLeafNode(lv_transientField_0_0, grammarAccess.getListFieldAccess().getTransientFieldTransientKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getListFieldRule());
					}
					setWithLastConsumed($current, "transientField", true, "transient");
				}
			)
		)?
		(
			(
				lv_identityField_1_0='*'
				{
					newLeafNode(lv_identityField_1_0, grammarAccess.getListFieldAccess().getIdentityFieldAsteriskKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getListFieldRule());
					}
					setWithLastConsumed($current, "identityField", true, "*");
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getListFieldAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getListFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getListFieldAccess().getColonKeyword_3());
		}
		otherlv_4='list'
		{
			newLeafNode(otherlv_4, grammarAccess.getListFieldAccess().getListKeyword_4());
		}
		otherlv_5='('
		{
			newLeafNode(otherlv_5, grammarAccess.getListFieldAccess().getLeftParenthesisKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getListFieldRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getListFieldAccess().getElementTypeDataTypeCrossReference_6_0());
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getListFieldAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleLengthField
entryRuleLengthField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLengthFieldRule()); }
	iv_ruleLengthField=ruleLengthField
	{ $current=$iv_ruleLengthField.current; }
	EOF;

// Rule LengthField
ruleLengthField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_transientField_0_0='transient'
				{
					newLeafNode(lv_transientField_0_0, grammarAccess.getLengthFieldAccess().getTransientFieldTransientKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLengthFieldRule());
					}
					setWithLastConsumed($current, "transientField", true, "transient");
				}
			)
		)?
		(
			(
				lv_identityField_1_0='*'
				{
					newLeafNode(lv_identityField_1_0, grammarAccess.getLengthFieldAccess().getIdentityFieldAsteriskKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLengthFieldRule());
					}
					setWithLastConsumed($current, "identityField", true, "*");
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getLengthFieldAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLengthFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getLengthFieldAccess().getColonKeyword_3());
		}
		otherlv_4='length'
		{
			newLeafNode(otherlv_4, grammarAccess.getLengthFieldAccess().getLengthKeyword_4());
		}
		otherlv_5='('
		{
			newLeafNode(otherlv_5, grammarAccess.getLengthFieldAccess().getLeftParenthesisKeyword_5());
		}
		(
			(
				lv_byteLen_6_0=RULE_INT
				{
					newLeafNode(lv_byteLen_6_0, grammarAccess.getLengthFieldAccess().getByteLenINTTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLengthFieldRule());
					}
					setWithLastConsumed(
						$current,
						"byteLen",
						lv_byteLen_6_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_7=','
		{
			newLeafNode(otherlv_7, grammarAccess.getLengthFieldAccess().getCommaKeyword_7());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLengthFieldRule());
					}
				}
				otherlv_8=RULE_ID
				{
					newLeafNode(otherlv_8, grammarAccess.getLengthFieldAccess().getRefBinaryFieldCrossReference_8_0());
				}
			)
		)
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getLengthFieldAccess().getRightParenthesisKeyword_9());
		}
	)
;

// Entry rule entryRuleCountField
entryRuleCountField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCountFieldRule()); }
	iv_ruleCountField=ruleCountField
	{ $current=$iv_ruleCountField.current; }
	EOF;

// Rule CountField
ruleCountField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_transientField_0_0='transient'
				{
					newLeafNode(lv_transientField_0_0, grammarAccess.getCountFieldAccess().getTransientFieldTransientKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCountFieldRule());
					}
					setWithLastConsumed($current, "transientField", true, "transient");
				}
			)
		)?
		(
			(
				lv_identityField_1_0='*'
				{
					newLeafNode(lv_identityField_1_0, grammarAccess.getCountFieldAccess().getIdentityFieldAsteriskKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCountFieldRule());
					}
					setWithLastConsumed($current, "identityField", true, "*");
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getCountFieldAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCountFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getCountFieldAccess().getColonKeyword_3());
		}
		otherlv_4='count'
		{
			newLeafNode(otherlv_4, grammarAccess.getCountFieldAccess().getCountKeyword_4());
		}
		otherlv_5='('
		{
			newLeafNode(otherlv_5, grammarAccess.getCountFieldAccess().getLeftParenthesisKeyword_5());
		}
		(
			(
				lv_byteLen_6_0=RULE_INT
				{
					newLeafNode(lv_byteLen_6_0, grammarAccess.getCountFieldAccess().getByteLenINTTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCountFieldRule());
					}
					setWithLastConsumed(
						$current,
						"byteLen",
						lv_byteLen_6_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_7=','
		{
			newLeafNode(otherlv_7, grammarAccess.getCountFieldAccess().getCommaKeyword_7());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCountFieldRule());
					}
				}
				otherlv_8=RULE_ID
				{
					newLeafNode(otherlv_8, grammarAccess.getCountFieldAccess().getRefListFieldCrossReference_8_0());
				}
			)
		)
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getCountFieldAccess().getRightParenthesisKeyword_9());
		}
	)
;

// Entry rule entryRuleDataTypeField
entryRuleDataTypeField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeFieldRule()); }
	iv_ruleDataTypeField=ruleDataTypeField
	{ $current=$iv_ruleDataTypeField.current; }
	EOF;

// Rule DataTypeField
ruleDataTypeField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_transientField_0_0='transient'
				{
					newLeafNode(lv_transientField_0_0, grammarAccess.getDataTypeFieldAccess().getTransientFieldTransientKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataTypeFieldRule());
					}
					setWithLastConsumed($current, "transientField", true, "transient");
				}
			)
		)?
		(
			(
				lv_identityField_1_0='*'
				{
					newLeafNode(lv_identityField_1_0, grammarAccess.getDataTypeFieldAccess().getIdentityFieldAsteriskKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataTypeFieldRule());
					}
					setWithLastConsumed($current, "identityField", true, "*");
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getDataTypeFieldAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataTypeFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getDataTypeFieldAccess().getColonKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataTypeFieldRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getDataTypeFieldAccess().getDatatypeDataTypeCrossReference_4_0());
				}
			)
		)
	)
;

// Entry rule entryRuleFormatter
entryRuleFormatter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormatterRule()); }
	iv_ruleFormatter=ruleFormatter
	{ $current=$iv_ruleFormatter.current; }
	EOF;

// Rule Formatter
ruleFormatter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='formatter'
		{
			newLeafNode(otherlv_0, grammarAccess.getFormatterAccess().getFormatterKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFormatterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFormatterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
