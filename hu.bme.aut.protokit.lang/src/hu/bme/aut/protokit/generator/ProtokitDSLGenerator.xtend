/*
 * generated by Xtext 2.10.0
 */
package hu.bme.aut.protokit.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import hu.bme.aut.protokit.model.ProtocolModel
import hu.bme.aut.protokit.m2m.oogen.Protokit2OogenTransform
import hu.bme.aut.oogen.java.OOCodeGeneratorJava
import hu.bme.aut.oogen.general.GeneratedFile
import hu.bme.aut.oogen.OOModel
import hu.bme.aut.oogen.cpp.OOCodeGeneratorCpp

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ProtokitDSLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var ProtocolModel model = resource.allContents.filter(typeof(ProtocolModel)).toList.get(0)
		var Protokit2OogenTransform transformer = new Protokit2OogenTransform
		var OOModel ooModel = transformer.transform(model)

		var OOCodeGeneratorJava javaGenerator = OOCodeGeneratorJava.instance
		for (GeneratedFile file : javaGenerator.getGeneratedFiles(ooModel))
			if (file.keep)
				fsa.generateFile(file.path.toString, ProtoKitOutputConfigurationProvider::GEN_ONCE_OUTPUT, file.content)
			else
				fsa.generateFile(file.path.toString, file.content)

		var OOCodeGeneratorCpp cppGenerator = OOCodeGeneratorCpp.instance
		for (GeneratedFile file : cppGenerator.getGeneratedFiles(ooModel))
			if (file.keep)
				fsa.generateFile(file.path.toString, ProtoKitOutputConfigurationProvider::GEN_ONCE_OUTPUT, file.content)
			else
				fsa.generateFile(file.path.toString, file.content)

	}
}
